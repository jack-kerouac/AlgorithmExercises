package numeric.goldbach;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import com.google.common.base.Function;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Iterables;

public class GoldbachPartitionerTest {

	private static GoldbachPartition gp(long n1, long n2) {
		return new GoldbachPartition(n1, n2);
	}

	@Test
	public void testCalculatePartitions_64() {
		GoldbachPartitioner.init(64);
		
		// 3 + 61 5 + 59 11 + 53 17 + 47 23 + 41
		assertEquals(ImmutableList.of(gp(3, 61), gp(5, 59), gp(11, 53), gp(17, 47), gp(23, 41)), GoldbachPartitioner
				.calculatePartitions(64));
	}

	@Test
	public void testCalculatePartitions_9948() {
		GoldbachPartitioner.init(9948);
		
		// 3 + 61 5 + 59 11 + 53 17 + 47 23 + 41
		String partitions = "7    + 9941,17   + 9931,19   + 9929,41   + 9907,47   + 9901,\n"
				+ "61   + 9887,89   + 9859,97   + 9851,109  + 9839,131  + 9817,\n"
				+ "137  + 9811,157  + 9791,167  + 9781,179  + 9769,181  + 9767,\n"
				+ "199  + 9749,227  + 9721,229  + 9719,251  + 9697,269  + 9679,\n"
				+ "271  + 9677,317  + 9631,347  + 9601,397  + 9551,401  + 9547,\n"
				+ "409  + 9539,457  + 9491,487  + 9461,509  + 9439,557  + 9391,\n"
				+ "571  + 9377,577  + 9371,599  + 9349,607  + 9341,691  + 9257,\n"
				+ "709  + 9239,727  + 9221,739  + 9209,761  + 9187,787  + 9161,\n"
				+ "797  + 9151,811  + 9137,821  + 9127,839  + 9109,857  + 9091,\n"
				+ "881  + 9067,907  + 9041,919  + 9029,937  + 9011,941  + 9007,\n"
				+ "947  + 9001,977  + 8971,997  + 8951,1019 + 8929,1061 + 8887,\n"
				+ "1087 + 8861,1109 + 8839,1117 + 8831,1129 + 8819,1187 + 8761,\n"
				+ "1201 + 8747,1217 + 8731,1229 + 8719,1249 + 8699,1259 + 8689,\n"
				+ "1279 + 8669,1301 + 8647,1307 + 8641,1319 + 8629,1321 + 8627,\n"
				+ "1367 + 8581,1409 + 8539,1427 + 8521,1447 + 8501,1481 + 8467,\n"
				+ "1487 + 8461,1559 + 8389,1571 + 8377,1579 + 8369,1619 + 8329,\n"
				+ "1637 + 8311,1657 + 8291,1777 + 8171,1787 + 8161,1801 + 8147,\n"
				+ "1831 + 8117,1847 + 8101,1861 + 8087,1867 + 8081,1879 + 8069,\n"
				+ "1889 + 8059,1931 + 8017,1997 + 7951,1999 + 7949,2011 + 7937,\n"
				+ "2029 + 7919,2069 + 7879,2081 + 7867,2131 + 7817,2207 + 7741,\n"
				+ "2221 + 7727,2267 + 7681,2309 + 7639,2341 + 7607,2357 + 7591,\n"
				+ "2371 + 7577,2389 + 7559,2399 + 7549,2411 + 7537,2441 + 7507,\n"
				+ "2459 + 7489,2467 + 7481,2531 + 7417,2579 + 7369,2617 + 7331,\n"
				+ "2711 + 7237,2719 + 7229,2729 + 7219,2741 + 7207,2789 + 7159,\n"
				+ "2797 + 7151,2819 + 7129,2879 + 7069,2909 + 7039,2957 + 6991,\n"
				+ "2971 + 6977,2999 + 6949,3001 + 6947,3037 + 6911,3041 + 6907,\n"
				+ "3049 + 6899,3079 + 6869,3119 + 6829,3121 + 6827,3167 + 6781,\n"
				+ "3169 + 6779,3187 + 6761,3229 + 6719,3257 + 6691,3259 + 6689,\n"
				+ "3329 + 6619,3371 + 6577,3457 + 6491,3467 + 6481,3499 + 6449,\n"
				+ "3527 + 6421,3559 + 6389,3581 + 6367,3631 + 6317,3637 + 6311,\n"
				+ "3671 + 6277,3677 + 6271,3691 + 6257,3701 + 6247,3719 + 6229,\n"
				+ "3727 + 6221,3797 + 6151,3847 + 6101,3881 + 6067,3911 + 6037,\n"
				+ "3919 + 6029,3967 + 5981,4021 + 5927,4051 + 5897,4079 + 5869,\n"
				+ "4091 + 5857,4099 + 5849,4127 + 5821,4157 + 5791,4211 + 5737,\n"
				+ "4231 + 5717,4259 + 5689,4289 + 5659,4297 + 5651,4357 + 5591,\n"
				+ "4391 + 5557,4421 + 5527,4441 + 5507,4447 + 5501,4507 + 5441,\n"
				+ "4517 + 5431,4549 + 5399,4561 + 5387,4567 + 5381,4597 + 5351,\n"
				+ "4639 + 5309,4651 + 5297,4721 + 5227,4751 + 5197,4759 + 5189,\n"
				+ "4801 + 5147,4861 + 5087,4871 + 5077,4889 + 5059,4909 + 5039,\n" + "4937 + 5011";

		Iterable<GoldbachPartition> transform = Iterables.transform(ImmutableList.copyOf(partitions.split(",")),
				new Function<String, GoldbachPartition>() {

					@Override
					public GoldbachPartition apply(String input) {
						return new GoldbachPartition(input.trim());
					}
				});

		assertEquals(ImmutableList.copyOf(transform), GoldbachPartitioner.calculatePartitions(9948));
	}
}
